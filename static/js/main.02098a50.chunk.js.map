{"version":3,"sources":["components/header/Header.jsx","components/card/Card.jsx","components/card/GameOver.jsx","App.js","reportWebVitals.js","index.js"],"names":["Header","restartGame","className","onClick","Card","id","isFlipped","handleClick","cardNumber","flipSpeedBackToFront","flipSpeedFrontToBack","GameOver","App","state","Array","fill","shuffledCard","duplicateCard","sort","Math","random","clickCount","prevSelectedCard","prevCardId","event","preventDefault","cardId","target","newFlipps","slice","setState","prevState","newCard","previousCard","isCardMatch","card1","card2","card1Id","card2Id","hideCard","setTimeout","flipBack","isGameOver","every","element","index","array","this","map","PureComponent","reduce","preValue","current","concat","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.02098a50.chunk.js","sourcesContent":["import React from 'react';\n\nexport const Header = ({ restartGame }) => (\n  <div className=\"grid-header-container\">\n    <div className=\"justify-left timer\"></div>\n    <div className=\"justify-center game-status-text\"></div>\n    <div className=\"justify-end\">\n      <button onClick={restartGame} className=\"restart-button\">Restart Game</button>\n    </div>\n  </div>\n);\n\nexport default Header;","import React from 'react';\nimport ReactCardFlip from \"react-card-flip\";\n\nexport const Card = ({id, isFlipped, handleClick, cardNumber }) => (\n  <ReactCardFlip isFlipped={isFlipped} flipSpeedBackToFront={1} flipSpeedFrontToBack={1} >\n    <button id={id} className={`card card-front ${cardNumber !== -1 ? \"\" : \"hide-card\"}`} onClick={handleClick} key=\"front\">\n      \n    </button>\n\n    <button id={id} className={`card card-back ${cardNumber !== -1 ? \"\" : \"hide-card\"}`} onClick={handleClick} key=\"back\">\n      { cardNumber }\n    </button>\n  </ReactCardFlip>\n  );\nexport default Card;\n","import React from 'react';\n\nexport const GameOver = ({ restartGame }) => (\n  <div className=\"justify-center\">\n    <h1>Game Over!</h1>\n    <h3>If you enjoyed playing this game, follow me @iamkenec for more...</h3>\n    <button className=\"restart-button\" onClick={restartGame}>Restart Game</button>\n  </div>\n);\n\nexport default GameOver;","import React, { PureComponent } from 'react';\nimport Header from './components/header/Header';\nimport Card from './components/card/Card';\nimport GameOver from './components/card/GameOver';\n\nimport './styles/main.css';\n\nclass App extends PureComponent {\n\n  state = { \n    isFlipped: Array(16).fill(false),\n    shuffledCard: App.duplicateCard().sort(() => Math.random() - 0.5),\n    clickCount: 1,\n    prevSelectedCard: -1,\n    prevCardId: -1\n  };\n\n  static duplicateCard = () => {\n    return [0,1,2,3,4,5,6,7].reduce((preValue, current, index, array) => {\n      return preValue.concat([current, current])\n    },[]);\n  };\n\n  handleClick = event => {\n    event.preventDefault();\n    const cardId = event.target.id;\n    const newFlipps = this.state.isFlipped.slice();\n    this.setState({\n        prevSelectedCard: this.state.shuffledCard[cardId],\n        prevCardId: cardId\n    });\n\n    if (newFlipps[cardId] === false) {\n      newFlipps[cardId] = !newFlipps[cardId];\n      this.setState(prevState => ({ \n        isFlipped: newFlipps,\n        clickCount: this.state.clickCount + 1\n      }));\n\n      if (this.state.clickCount === 2) {\n        this.setState({ clickCount: 1 });\n        const prevCardId = this.state.prevCardId;\n        const newCard = this.state.shuffledCard[cardId];\n        const previousCard = this.state.prevSelectedCard;\n\n        this.isCardMatch(previousCard, newCard, prevCardId, cardId);\n      }\n    }\n  };\n\nisCardMatch = (card1, card2, card1Id, card2Id) => {\n  if (card1 === card2) {\n    const hideCard = this.state.shuffledCard.slice();\n    hideCard[card1Id] = -1;\n    hideCard[card2Id] = -1;\n    setTimeout(() => {\n      this.setState(prevState => ({\n        shuffledCard: hideCard\n      }))\n    }, 1000);\n  } else {\n    const flipBack = this.state.isFlipped.slice();\n    flipBack[card1Id] = false;\n    flipBack[card2Id] = false;\n    setTimeout(() => {\n      this.setState(prevState => ({ isFlipped: flipBack }));\n    }, 1000);\n  }\n};\n\n  restartGame = () => {\n    this.setState({\n      isFlipped: Array(16).fill(false),\n      shuffledCard: App.duplicateCard().sort(() => Math.random() - 0.5),\n      clickCount: 1,\n      prevSelectedCard: -1,\n      prevCardId: -1\n    });\n  };\n\n  isGameOver = () => {\n    return this.state.isFlipped.every((element, index, array) => element !== false);\n  };\n\n  render() {\n    return (\n     <div>\n       <Header restartGame={this.restartGame} />\n       { this.isGameOver() ? <GameOver restartGame={this.restartGame} /> :\n       <div className=\"grid-container\">\n          {\n            this.state.shuffledCard.map((cardNumber, index) => \n              <Card\n                key={index} \n                id={index} \n                cardNumber={cardNumber} \n                isFlipped={this.state.isFlipped[index]} \n                handleClick={this.handleClick}     \n              />\n            )\n          }\n        </div>\n       }\n     </div>\n    );\n  }\n\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}